{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica;
\f3\fmodern\fcharset0 Courier;\f4\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green29\blue164;\red9\green9\blue9;
\red10\green79\blue103;\red18\green51\blue230;\red114\green0\blue130;\red17\green109\blue18;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgenericrgb\c0\c11373\c64314;\csgenericrgb\c3529\c3529\c3529;
\csgenericrgb\c3922\c30980\c40392;\csgenericrgb\c7059\c20000\c90196;\csgenericrgb\c44706\c0\c50980;\csgenericrgb\c6667\c42745\c7059;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\margl1440\margr1440\vieww14300\viewh18520\viewkind0
\deftab720
\pard\pardeftab720\sa321\partightenfactor0

\f0\b\fs48 \cf0 \expnd0\expndtw0\kerning0
Binary Search\
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 Search Algorithms - Binary Search
\f1\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \outl0\strokewidth0 \strokec2 {{\NeXTGraphic iu.jpg \width9480 \height5320 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 Overview\

\f1\b0\fs26 The binary search will take a sorted data structure and search for an element in sections. The first section will be in the middle of the data structure, if it\'92s the searched value it will stop and return it. If it\'92s not, it will compare the middle value to the search value and determine if the value is greater or less than. Since the data structure  is sorted and broken into 2 sections it will only search the correct section where the searched value could be. It continues to do this with the entire data structure until it finds the searched value. 
\f0\b\fs36 \
\pard\pardeftab720\sa298\partightenfactor0

\f1\b0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf0 Analysis\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 Time Space Complexity:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0

\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 	\'95 O(logn) - keeps dividing the array in half
\f0\b\fs28 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0

\fs36 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 [S] Strengths:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}Since this is a repeat search, recursion can be applied\expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 [W] Weakness:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}Data has to be sorted\expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 [O] Opportunities\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}Recursion can be applied \
{\listtext	\uc0\u8226 	}Iterative in this case is faster at times\expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 [T] Threats:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}Recursive methods has more overhead on the call stack\expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Code Implementation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3\b0\fs26 \cf3 \kerning1\expnd0\expndtw0 package \cf0 SeachAlgorithm.BinarySearch\cf4 ;\
\
\cf3 public class \cf0 Main \cf4 \{\
    \cf3 public static void \cf5 main\cf4 (\cf0 String\cf4 [] args) \{\
        \cf3 int\cf4 [] \cf0 intArray \cf4 = \{-\cf6 22\cf4 , -\cf6 15\cf4 , \cf6 1\cf4 , \cf6 7\cf4 , \cf6 20\cf4 , \cf6 35\cf4 , \cf6 55\cf4 \};\
        \cf0 System\cf4 .
\f4\i \cf7 out
\f3\i0 \cf4 .println(
\f4\i recursiveBinarySearch
\f3\i0 (\cf0 intArray\cf4 ,\cf6 7\cf4 ));\
    \}\
\
    \cf3 public static int \cf5 iterativeBinarySearch\cf4 (\cf3 int\cf4 [] input, \cf3 int \cf4 value)\{\
        \cf3 int \cf4 start = \cf6 0\cf4 ;\
        \cf3 int \cf4 end = input.\cf7 length\cf4 ;\
\
        \cf3 while\cf4 (start < end)\{\
            \cf3 int \cf0 midPoint \cf4 = (start + end) / \cf6 2\cf4 ;\
            \cf3 if\cf4 (input[\cf0 midPoint\cf4 ] == value)\{\
                \cf3 return \cf0 midPoint\cf4 ;\
            \}\
            \cf3 else if\cf4 (input[\cf0 midPoint\cf4 ] < value)\{\
                start = \cf0 midPoint\cf4 +\cf6 1\cf4 ;\
\
            \}\
            \cf3 else\cf4 \{\
                end = \cf0 midPoint\cf4 ;\
            \}\
        \}\
        \cf3 return \cf4 -\cf6 1\cf4 ;\
    \}\
\
    \cf3 public static int \cf5 recursiveBinarySearch\cf4 (\cf3 int\cf4 [] input, \cf3 int \cf4 value)\{\
        \cf3 return 
\f4\i \cf4 recursiveBinarySearch
\f3\i0 (input, \cf6 0\cf4 , input.\cf7 length\cf4 , value);\
\
    \}\
    \cf3 public static int \cf5 recursiveBinarySearch\cf4 (\cf3 int\cf4 [] input, \cf3 int \cf4 start, \cf3 int \cf4 end, \cf3 int \cf4 value)\{\
        \cf3 if\cf4 (start >= end)\{\
            \cf3 return \cf4 -\cf6 1\cf4 ;\
        \}\
        \cf3 int \cf0 mid \cf4 = (start+end) /\cf6 2\cf4 ;\
        \cf0 System\cf4 .
\f4\i \cf7 out
\f3\i0 \cf4 .println(\cf8 "midPoint " \cf4 +input[\cf0 mid\cf4 ]);\
        \cf3 if\cf4 (input[\cf0 mid\cf4 ] == value)\{\
            \cf3 return \cf0 mid\cf4 ;\
        \}\
        \cf3 else if\cf4 (input[\cf0 mid\cf4 ] < value)\{\
            \cf3 return 
\f4\i \cf4 recursiveBinarySearch
\f3\i0 (input, \cf0 mid\cf4 +\cf6 1\cf4 , input.\cf7 length\cf4 , value);\
        \}\
        \cf3 else\cf4 \{\
            \cf3 return 
\f4\i \cf4 recursiveBinarySearch
\f3\i0 (input, start, \cf0 mid\cf4 , value);\
        \}\
\
    \}\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \
}