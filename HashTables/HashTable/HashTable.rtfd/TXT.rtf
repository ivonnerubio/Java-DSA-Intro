{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}}
\margl1440\margr1440\vieww14100\viewh18300\viewkind0
\deftab720
\pard\pardeftab720\sa321\partightenfactor0

\f0\b\fs48 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hash Tables\
\pard\pardeftab720\sa280\partightenfactor0

\fs28 \cf0 Hash Tables - Array Implementation
\f1\b0\fs24 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 {{\NeXTGraphic mw1920_external-content.duckduckgo.com.png \width10000 \height6760 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 {{\NeXTGraphic mw1920_hash.gif \width11540 \height8500 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Overview\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 A hash table is a form of an abstract data type that can be used for different implementations. In this example it uses an array implementation. The hash table consists of key/value pairs. The key does not have to be an integer. When adding a new value to the hash table you provide a key and value. When retrieving a value you provide the key. \
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf0 Analysis\
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 \outl0\strokewidth0 Time Space Complexity:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0

\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 	\'95 
\f0\b\fs28 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0

\fs36 \cf0 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 [S] Strengths:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Abstract Data Type\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Consists of key/value pairs - data types don't have to match\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Optimized for retrieval (when you know the key)\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Key doesn't have to be an integer\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 [W] Weakness:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Load factor needs to be adjusted\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Collisions may occur if Linear Probing type ideas are not implemented.\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 [O] Opportunities\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Easy implementation that can be used with different data types\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 [T] Threats:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Collisions may cause data to be lost or not entered\
\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 Hashing:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Maps keys of any data type to an integer\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Hash function maps keys to int\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In Java, hash function is Object.hashCode()\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Collision occurs when more than one value has the same hashed value\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf0 Load Factor:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f1\b0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Tells us how full a hash table is\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Load factor = # of items / capacity = size / capacity\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Load factor is used to decide when to resize the array backing the hashtable\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Don't want to load factor too low (lots of empty space) \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Don't want to load factor too high (will increase the likelihood of collisions)\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Can play a role in determining the time complexity for retrieval\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \strokec2 \
\pard\pardeftab720\sa298\partightenfactor0

\f0\b\fs36 \cf0 Code Implementation\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs24 \cf0 \strokec2 public class SimpleHashtable \{\
\
\
    private Employee[] hashtable;\
\
\
    public SimpleHashtable() \{\
        hashtable = new Employee[10];\
    \}\
\
\
    public void put(String key, Employee employee) \{\
        int hashedKey = hashKey(key);\
        if (hashtable[hashedKey] != null) \{\
            System.out.println("Sorry, there's already an employee at position " + hashedKey);\
        \}\
        else \{\
            hashtable[hashedKey] = employee;\
        \}\
    \}\
\
\
    public Employee get(String key) \{\
        int hashedKey = hashKey(key);\
        return hashtable[hashedKey];\
    \}\
\
\
    private int hashKey(String key) \{\
        return key.length() % hashtable.length;\
    \}\
\
\
    public void printHashtable() \{\
        for (int i = 0; i < hashtable.length; i++) \{\
            System.out.println(hashtable[i]);\
        \}\
    \
}